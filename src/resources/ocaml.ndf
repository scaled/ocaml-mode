name: OCaml
scopeName: source.ocaml
foldStart: (\b(module|class|)\s.*?=\s*$|\bbegin|sig|struct|(object(\s*\(_?[a-z]+\))?)\s*$|\bwhile\s.*?\bdo\s*$|^let(?:\s+rec)?\s+[a-z_][a-zA-Z0-9_]*\s+(?!=)\S)
foldStop: (\bend(\s+in)?[ \t]*(;{1,2}|=)?|\bdone;?|^\s*;;|^\s*in)[ \t]*$
repository:
 arrays:
  multi:
   name: meta.array.ocaml
   begin: (\[\|)
   bcaps: 1=punctuation.definition.array.begin.ocaml
   end: (\|])
   ecaps: 1=punctuation.definition.array.end.ocaml
   patterns:
    include: #arrays
    include: $self
 comments:
  multi:
   name: comment.block.ocaml
   begin: \(\*
   bcaps: 0=punctuation.definition.comment.begin.ocaml
   end: \*\)
   ecaps: 0=punctuation.definition.comment.end.ocaml
   patterns:
    include: #comments
 comments_inner:
  include: #comments
  multi:
   name: comment.block.string.quoted.double.ocaml
   begin: (?=[^\\])(")
   end: "
   patterns:
    single:
     name: comment.block.string.constant.character.escape.ocaml
     pattern: \\(x[a-fA-F0-9][a-fA-F0-9]|[0-2]\d\d|[bnrt'"\\])
 constants:
  single:
   name: constant.language.pseudo-variable.ocaml
   pattern: (?:\[\s*(\])|\((\))|\(\s*(\)))
   caps: 1=meta.empty-typing-pair.ocaml 2=meta.empty-typing-pair.parens.ocaml 3=meta.empty-typing-pair.ocaml
  single:
   name: constant.language.boolean.ocaml
   pattern: \b(true|false)\b
  single:
   name: constant.numeric.floating-point.ocaml
   pattern: \b-?[0-9][0-9_]*((\.([0-9][0-9_]*([eE][+-]??[0-9][0-9_]*)?)?)|([eE][+-]??[0-9][0-9_]*))
  single:
   name: constant.numeric.integer.nativeint.ocaml
   pattern: \b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))n
  single:
   name: constant.numeric.integer.int64.ocaml
   pattern: \b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))L
  single:
   name: constant.numeric.integer.int32.ocaml
   pattern: \b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))l
  single:
   name: constant.numeric.integer.ocaml
   pattern: \b(-?((0(x|X)[0-9a-fA-F][0-9a-fA-F_]*)|(0(o|O)[0-7][0-7_]*)|(0(b|B)[01][01_]*)|([0-9][0-9_]*)))
  single:
   name: constant.character.ocaml
   pattern: '(.|\\(x[a-fA-F0-9][a-fA-F0-9]|[0-2]\d\d|[bnrt'"\\]))'
 definite_storagetypes:
  include: #storagetypes
  single:
   name: storage.type.ocaml
   pattern: \b[a-zA-Z0-9'_]+\b
 lists:
  multi:
   name: meta.list.ocaml
   begin: (\[)(?!\||<|>)
   bcaps: 1=punctuation.definition.list.begin.ocaml
   end: (?<!\||>)(])
   ecaps: 1=punctuation.definition.list.end.ocaml
   patterns:
    include: #lists
    include: $self
 matchpatterns:
  single:
   name: constant.language.universal-match.ocaml
   pattern: \b_\b
  single:
   name: punctuation.separator.match-pattern.ocaml
   pattern: \|(?=\s*\S)
  multi:
   name: meta.match-option.ocaml
   begin: (\()(?=(?!=.*?->).*?\|)
   bcaps: 1=punctuation.definition.match-option.ocaml
   end: (\))
   ecaps: 1=punctuation.definition.match-option.ocaml
   patterns:
    single:
     name: punctuation.separator.match-option.ocaml
     pattern: \|
    include: #matchpatterns
  include: #moduleref
  include: #constants
  include: #variables
  include: $self
 module-signature:
  multi:
   name: meta.module.signature.val.ocaml
   begin: (val)\s+([a-z_][a-zA-Z0-9_']*)\s*(:)
   bcaps: 1=keyword.other.ocaml 2=entity.name.type.value-signature.ocaml 3=punctuation.separator.type-constraint.ocaml
   end: (?=\b(type|val|external|class|module|end)\b)|^\s*$
   patterns:
    single:
     name: variable.parameter.ameter.optional.ocaml
     pattern: (\?)([a-z][a-zA-Z0-9_]*)\s*(:)
     caps: 1=punctuation.definition.optional-parameter.ocaml 2=entity.name.tag.label.optional.ocaml 3=punctuation.separator.optional-parameter.ocaml
    multi:
     name: variable.parameter.labeled.ocaml
     begin: ([a-z][a-zA-Z0-9'_]*)\s*(:)\s*
     bcaps: 1=entity.name.tag.label.ocaml 2=punctuation.separator.label.ocaml 3=storage.type.ocaml
     end: \s
     patterns:
      include: #definite_storagetypes
    include: #typedefs
  multi:
   name: meta.module.signature.external.ocaml
   begin: (external)\s+([a-z_][a-zA-Z0-9_']*)\s*(:)
   bcaps: 1=keyword.other.ocaml 2=entity.name.type.external-signature.ocaml 3=punctuation.separator.type-constraint.ocaml
   end: (?=\b(type|val|external|class|module|let|end)\b)|^\s*$
   patterns:
    single:
     name: variable.parameter.optional.ocaml
     pattern: (\?)([a-z][a-zA-Z0-9_]*)\s*(:)
     caps: 1=punctuation.definition.optional-parameter.ocaml 2=entity.name.tag.label.optional.ocaml 3=punctuation.separator.optional-parameter.ocaml
    multi:
     name: variable.parameter.labeled.ocaml
     begin: (~)([a-z][a-zA-Z0-9'_]*)\s*(:)\s*
     bcaps: 1=punctuation.definition.labeled-parameter.ocaml 2=entity.name.tag.label.ocaml 3=punctuation.separator.label.ocaml
     end: \s
     patterns:
      include: #variables
    include: #strings
    include: #typedefs
 moduleref:
  single:
   name: meta.module-reference.ocaml
   pattern: \b([A-Z][a-zA-Z0-9'_]*)(\.)
 storagetypes:
  single:
   name: storage.type.ocaml
   pattern: \b(int|char|float|string|list|array|bool|unit|exn|option|int32|int64|nativeint|format4|lazy_t)\b
  single:
   name: storage.type.variant.polymorphic.ocaml
   pattern: #[a-z_][a-zA-Z0-9_]*
 strings:
  multi:
   name: string.quoted.double.ocaml
   begin: (?=[^\\])(")
   bcaps: 1=punctuation.definition.string.begin.ocaml
   end: (")
   ecaps: 1=punctuation.definition.string.end.ocaml
   patterns:
    single:
     name: punctuation.separator.string.ignore-eol.ocaml
     pattern: \\$[ \t]*
    single:
     name: constant.character.string.escape.ocaml
     pattern: \\(x[a-fA-F0-9][a-fA-F0-9]|[0-2]\d\d|[bnrt'"\\])
    single:
     name: constant.character.regexp.escape.ocaml
     pattern: \\[\|\(\)1-9$^.*+?\[\]]
    single:
     name: invalid.illegal.character.string.escape
     pattern: \\(?!(x[a-fA-F0-9][a-fA-F0-9]|[0-2]\d\d|[bnrt'"\\]|[\|\(\)1-9$^.*+?\[\]]|$[ \t]*))(?:.)
 typedefs:
  single:
   name: punctuation.separator.variant-definition.ocaml
   pattern: \|
  include: #comments_inner
  multi:
   name: meta.paren-group.ocaml
   begin: \(
   end: \)
   patterns:
    include: #typedefs
  single:
   name: keyword.other.ocaml
   pattern: \bof\b
  include: #storagetypes
  single:
   name: storage.type.ocaml
   pattern: (?<=\s|\()['a-z_][a-zA-Z0-9_]*\b
  single:
   name: meta.module.type.ocaml
   pattern: \b((?:[A-Z][a-zA-Z0-9'_]*)(?:\.[A-Z][a-zA-Z0-9'_]+)*)(\.[a-zA-Z0-9'_]+)
   caps: 1=support.other.module.ocaml 2=storage.type.module.ocaml
  multi:
   name: meta.polymorphic-variant.definition.ocaml
   begin: (\[(>|<)?)
   bcaps: 1=punctuation.definition.polymorphic-variant.ocaml
   end: (\])
   ecaps: 1=punctuation.definition.polymorphic-variant.ocaml
   patterns:
    include: #typedefs
  include: $self
  single:
   name: punctuation.separator.algebraic-type.ocaml
   pattern: \|
 variables:
  single:
   name: variable.parameter.unit.ocaml
   pattern: \(\)
  include: #constants
  include: #moduleref
  multi:
   name: variable.parameter.labeled.ocaml
   begin: (~)([a-z][a-zA-Z0-9'_]*)(\s*:\s*)?
   bcaps: 1=punctuation.definition.labeled-parameter.ocaml 2=entity.name.tag.label.ocaml 3=punctuation.separator.label.ocaml
   end: (?=(->|\s))
   patterns:
    include: #variables
  single:
   name: variable.parameter.optional.ocaml
   pattern: (\?)([a-z][a-zA-Z0-9_]*)
   caps: 1=punctuation.definition.optional-parameter.ocaml 2=entity.name.tag.label.optional.ocaml
  multi:
   name: variable.parameter.optional.ocaml
   begin: (\?)(\()([a-z_][a-zA-Z0-9'_]*)\s*(=)
   bcaps: 1=punctuation.definition.optional-parameter.ocaml 2=punctuation.definition.optional-parameter.ocaml 3=entity.name.tag.label.optional.ocaml 4=punctuation.separator.optional-parameter-assignment.ocaml
   end: (\))
   ecaps: 1=punctuation.definition.optional-parameter.ocaml
   patterns:
    include: $self
  multi:
   name: meta.parameter.type-constrained.ocaml
   begin: (\()(?=(~[a-z][a-zA-Z0-9_]*:|("(\\"|[^"])*")|[^\(\)~"])+(?<!:)(:>|:(?![:=])))
   bcaps: 1=punctuation.section.type-constraint.ocaml
   end: (\))
   ecaps: 1=punctuation.section.type-constraint.ocaml
   patterns:
    multi:
     name: storage.type.ocaml
     begin: (?<!:)(:>|:(?![:=]))
     bcaps: 1=punctuation.separator.type-constraint.ocaml
     end: (?=\))
     patterns:
      multi:
       name: meta.paren.group
       begin: \(
       end: \)
    include: #variables
  include: #comments_inner
  multi:
   name: meta.paren-group.ocaml
   begin: \(
   end: \)
   patterns:
    include: #variables
  multi:
   name: variable.parameter.tuple.ocaml
   begin: (\()
   bcaps: 1=punctuation.definition.tuple.ocaml
   end: (\))
   ecaps: 1=punctuation.definition.tuple.ocaml
   patterns:
    include: #matchpatterns
    include: #variables
    single:
     name: punctuation.separator.tuple.ocaml
     pattern: ,
  multi:
   name: variable.parameter.record.ocaml
   begin: (\{)
   bcaps: 1=punctuation.definition.record.ocaml
   end: (\})
   ecaps: 1=punctuation.definition.record.ocaml
   patterns:
    include: #moduleref
    multi:
     name: meta.recordfield.match.ocaml
     begin: \b([a-z][a-zA-Z0-9'_]*)\s*(=)
     bcaps: 1=entity.name.tag.record.ocaml 2=punctuation.separator.record.field-assignment.ocaml
     end: (;)|(?=\})
     ecaps: 1=punctuation.separator.record.ocaml
     patterns:
      include: #matchpatterns
  include: #storagetypes
  single:
   name: variable.parameter.ocaml
   pattern: \b[a-z_][a-zA-Z0-9'_]*
patterns:
 single:
  name: meta.module.binding
  pattern: \b(let)\s+(module)\s+([A-Z][a-zA-Z0-9'_]*)\s*(=)
  caps: 1=keyword.other.module-binding.ocaml 2=keyword.other.module-definition.ocaml 3=support.other.module.ocaml 4=punctuation.separator.module-binding.ocmal
 multi:
  name: meta.module.openbinding
  begin: \b(let)\s+(open)\s+([A-Z][a-zA-Z0-9'_]*)(?=(\.[A-Z][a-zA-Z0-9_]*)*)
  bcaps: 1=keyword.other.module-binding.ocaml 2=keyword.other.ocaml 3=support.other.module.ocaml
  end: (\s|$)
  patterns:
   single:
    name: support.other.module.ocaml
    pattern: (\.)([A-Z][a-zA-Z0-9'_]*)
    caps: 1=punctuation.separator.module-reference.ocaml
 multi:
  name: meta.function.ocaml
  begin: \b(let|and)\s+(?!\(\*)((rec\s+)([a-z_][a-zA-Z0-9_']*)\b|([a-z_][a-zA-Z0-9_']*|\([^)]+\))(?=\s)((?=\s*=\s*(?=fun(?:ction)\b))|(?!\s*=)))
  bcaps: 1=keyword.other.function-definition.ocaml 3=keyword.other.funtion-definition.ocaml 4=entity.name.function.ocaml 5=entity.name.function.ocaml
  end: (?:(:)\s*([^=]+))?(?:(=)|(=)\s*(?=fun(?:ction)\b))
  ecaps: 1=punctuation.separator.function.type-constraint.ocaml 2=storage.type.ocaml 3=keyword.operator.ocaml 4=keyword.operator.ocaml
  patterns:
   include: #variables
 multi:
  name: meta.function.anonymous.ocaml
  begin: (\(|\s)(?=fun\s)
  bcaps: 1=punctuation.definition.function.anonymous.ocaml
  end: (\))
  ecaps: 1=punctuation.definition.function.anonymous.ocaml
  patterns:
   multi:
    name: meta.function.anonymous.definition.ocaml
    begin: (?<=(\(|\s))(fun)\s
    bcaps: 2=keyword.other.function-definition.ocaml
    end: (->)
    ecaps: 1=punctuation.separator.function-definition.ocaml
    patterns:
     include: #variables
   include: $self
 multi:
  name: meta.type-definition-group.ocaml
  begin: ^\s*(?=type\s)
  end: \b(?=let|end|val)|^\s*$
  patterns:
   multi:
    name: meta.type-definition.ocaml
    begin: \b(type|and)\s+([^=]*)(=)?
    bcaps: 1=keyword.other.type-definition.ocaml 2=storage.type.ocaml 3=punctuation.separator.type-definition.ocaml
    end: (?=\b(type|and|let|end|val)\b)|(?=^\s*$)
    patterns:
     include: #typedefs
 multi:
  name: meta.pattern-match.ocaml
  begin: \b(with|function)(?=(\s*$|.*->))\b|((?<!\S)(\|)(?=(\w|\s).*->))
  bcaps: 1=keyword.control.match-definition.ocaml 2=keyword.other.function-definition.ocaml 3=keyword.control.match-definition.ocaml
  end: (?:(->)|\b(when)\b|\s(?=\|))
  ecaps: 1=punctuation.separator.match-definition.ocaml 2=keyword.control.match-condition.ocaml
  patterns:
   include: #matchpatterns
 single:
  name: meta.class.type-definition.ocaml
  pattern: ^[ \t]*(class\s+type\s+)((\[\s*('[A-Za-z][a-zA-Z0-9_']*(?:\s*,\s*'[A-Za-z][a-zA-Z0-9_']*)*)\s*\]\s+)?[a-z_][a-zA-Z0-9'_]*)
  caps: 1=keyword.other.class-type-definition.ocaml 2=entity.name.type.class-type.ocaml 4=storage.type.ocaml
 multi:
  name: meta.class.ocaml
  begin: ^[ \t]*(class)(?:\s+(?!(?:virtual)\s+))((\[\s*('[A-Za-z][a-zA-Z0-9_']*(?:\s*,\s*'[A-Za-z][a-zA-Z0-9_']*)*)\s*\]\s+)?[a-z_][a-zA-Z0-9'_]*)
  bcaps: 1=keyword.other.class-definition.ocaml 2=entity.name.type.class.ocaml 4=storage.type.ocaml
  end: (=)
  ecaps: 1=keyword.operator.ocaml
  patterns:
   include: #variables
 multi:
  name: meta.class.virtual.ocaml
  begin: ^[ \t]*(class\s+virtual\s+)((\[\s*('[A-Za-z][a-zA-Z0-9_']*(?:\s*,\s*'[A-Za-z][a-zA-Z0-9_']*)*)\s*\]\s+)?[a-z_][a-zA-Z0-9'_]*)
  bcaps: 1=keyword.other.class-definition.ocaml 2=entity.name.type.class.ocaml 4=storage.type.ocaml
  end: (=)
  ecaps: 1=keyword.operator.ocaml
  patterns:
   include: #variables
 single:
  name: meta.class.virtual.type-definition.ocaml
  pattern: ^[ \t]*(class\s+type\s+virtual)((\[\s*('[A-Za-z][a-zA-Z0-9_']*(?:\s*,\s*'[A-Za-z][a-zA-Z0-9_']*)*)\s*\]\s+)?[a-z_][a-zA-Z0-9'_]*)
  caps: 1=keyword.other.class-type-definition.ocaml 2=entity.name.type.class-type.ocaml 4=storage.type.ocaml
 multi:
  name: meta.record.ocaml
  begin: (\{)
  bcaps: 1=punctuation.definition.record.ocaml
  end: (\})
  ecaps: 1=punctuation.definition.record.ocaml
  patterns:
   single:
    name: keyword.other.language.ocaml
    pattern: \bwith\b
   multi:
    name: meta.record.definition.ocaml
    begin: (\bmutable\s+)?\b([a-z_][a-zA-Z0-9_']*)\s*(:)
    bcaps: 1=keyword.other.storage.modifier.ocaml 2=source.ocaml 3=punctuation.definition.record.ocaml
    end: (;|(?=}))
    ecaps: 1=keyword.operator.ocaml
    patterns:
     include: #typedefs
   include: $self
 multi:
  name: meta.object.ocaml
  begin: \b(object)\s*(?:(\()(_?[a-z]+)(\)))?\s*$
  bcaps: 1=keyword.other.object-definition.ocaml 2=punctuation.definition.self-binding.ocaml 3=entity.name.type.self-binding.ocaml 4=punctuation.definition.self-binding.ocaml
  end: \b(end)\b
  ecaps: 1=keyword.control.object.ocaml 2=punctuation.terminator.expression.ocaml
  patterns:
   multi:
    name: meta.method.ocaml
    begin: \b(method)\s+(virtual\s+)?(private\s+)?([a-z_][a-zA-Z0-9'_]*)
    bcaps: 1=keyword.other.method-definition.ocaml 2=keyword.other.method-definition.ocaml 3=keyword.other.method-restriction.ocaml 4=entity.name.function.method.ocaml
    end: (=|:)
    ecaps: 1=keyword.operator.ocaml
    patterns:
     include: #variables
   multi:
    name: meta.object.type-constraint.ocaml
    begin: (constraint)\s+([a-z_'][a-zA-Z0-9'_]*)\s+(=)
    bcaps: 1=keyword.other.language.ocaml 2=storage.type.ocaml 3=keyword.operator.ocaml
    end: (#[a-z_][a-zA-Z0-9'_]*)|(int|char|float|string|list|array|bool|unit|exn|option|int32|int64|nativeint|format4|lazy_t)|([a-z_][a-zA-Z0-9'_]*)\s*$
    ecaps: 1=storage.type.polymorphic-variant.ocaml 2=storage.type.ocaml 3=storage.type.ocaml
   include: $self
 single:
  name: meta.method-call.ocaml
  pattern: (?<=\w|\)|')(#)[a-z_][a-zA-Z0-9'_]*
  caps: 1=punctuation.separator.method-call.ocaml
 single:
  name: meta.module.ocaml
  pattern: ^[ \t]*(module)\s+([A-Z_][a-zA-Z0-9'_]*)(?:\s*(:)\s*([A-Z][a-zA-Z0-9'_]*)?)?
  caps: 1=keyword.other.module-definition.ocaml 2=entity.name.type.module.ocaml 3=punctuation.separator.module-definition.ocaml 4=entity.name.type.module-type.ocaml
 single:
  name: meta.module.type.ocaml
  pattern: ^[ \t]*(module\s+type\s+)([A-Z][a-zA-Z0-9'_]*)
  caps: 1=keyword.other.module-type-definition.ocaml 2=entity.name.type.module-type.ocaml
 multi:
  name: meta.module.signature.ocaml
  begin: \b(sig)\b
  bcaps: 1=keyword.other.module.signature.ocaml
  end: \b(end)\b
  ecaps: 1=keyword.other.module.signature.ocaml 2=punctuation.terminator.expression.ocaml 3=keyword.operator.ocaml
  patterns:
   include: #module-signature
   include: $self
 multi:
  name: meta.module.structure.ocaml
  begin: \b(struct)\b
  bcaps: 1=keyword.other.module.structure.ocaml
  end: \b(end)\b
  ecaps: 1=keyword.other.module.structure.ocaml
  patterns:
   include: $self
 include: #moduleref
 multi:
  name: meta.module.open.ocaml
  begin: \b(open)\s+([A-Z][a-zA-Z0-9'_]*)(?=(\.[A-Z][a-zA-Z0-9_]*)*)
  bcaps: 1=keyword.other.ocaml 2=support.other.module.ocaml
  end: (\s|$)
  patterns:
   single:
    name: support.other.module.ocaml
    pattern: (\.)([A-Z][a-zA-Z0-9'_]*)
    caps: 1=punctuation.separator.module-reference.ocaml
 single:
  name: meta.exception.ocaml
  pattern: \b(exception)\s+([A-Z][a-zA-Z0-9'_]*)\b
  caps: 1=keyword.other.ocaml 2=entity.name.type.exception.ocaml
 multi:
  name: source.camlp4.embedded.ocaml
  begin: (?=(\[<)(?![^\[]+?[^>]]))
  end: (>])
  ecaps: 1=punctuation.definition.camlp4-stream.ocaml
  patterns:
   include: source.camlp4.ocaml
 include: #strings
 include: #constants
 include: #comments
 include: #lists
 include: #arrays
 multi:
  name: meta.type-constraint.ocaml
  begin: (\()(?=(~[a-z][a-zA-Z0-9_]*:|("(\\"|[^"])*")|[^\(\)~"])+(?<!:)(:>|:(?![:=])))
  bcaps: 1=punctuation.section.type-constraint.ocaml
  end: (?<!:)(:>|:(?![:=]))(.*?)(\))
  ecaps: 1=punctuation.separator.type-constraint.ocaml 2=storage.type.ocaml 3=punctuation.section.type-constraint.ocaml
  patterns:
   include: $self
 single:
  name: keyword.other.directive.ocaml
  pattern: ^[ \t]*#[a-zA-Z]+
 single:
  name: keyword.other.directive.line-number.ocaml
  pattern: ^[ \t]*#[0-9]*
 include: #storagetypes
 single:
  name: keyword.other.storage.modifier.ocaml
  pattern: \b(mutable|ref)\b
 single:
  name: entity.name.type.variant.polymorphic.ocaml
  pattern: `[A-Za-z][a-zA-Z0-9'_]*\b
 single:
  name: entity.name.type.variant.ocaml
  pattern: \b[A-Z][a-zA-Z0-9'_]*\b
 single:
  name: keyword.operator.symbol.ocaml
  pattern: !=|:=|>|<
 single:
  name: keyword.operator.infix.floating-point.ocaml
  pattern: [*+/-]\.
 single:
  name: keyword.operator.prefix.floating-point.ocaml
  pattern: ~-\.
 single:
  name: punctuation.definition.list.constructor.ocaml
  pattern: ::
 single:
  name: punctuation.terminator.expression.ocaml
  pattern: ;;
 single:
  name: punctuation.separator.ocaml
  pattern: ;
 single:
  name: punctuation.separator.function-return.ocaml
  pattern: ->
 single:
  name: keyword.operator.infix.ocaml
  pattern: [=<>@^&+\-*/$%|][|!$%&*+./:<=>?@^~-]*
 single:
  name: keyword.operator.prefix.ocaml
  pattern: \bnot\b|!|[!\?~][!$%&*+./:<=>?@^~-]+
 single:
  name: entity.name.tag.label.ocaml
  pattern: ~[a-z][a-z0-9'_]*(:)?
  caps: 1=punctuation.separator.argument-label.ocaml
 multi:
  name: meta.begin-end-group.ocaml
  begin: \b(begin)\b
  bcaps: 1=keyword.control.begin-end.ocaml
  end: \b(end)\b
  ecaps: 1=keyword.control.begin-end.ocaml
  patterns:
   include: $self
 multi:
  name: meta.for-loop.ocaml
  begin: \b(for)\b
  bcaps: 1=keyword.control.for-loop.ocaml
  end: \b(done)\b
  ecaps: 1=keyword.control.for-loop.ocaml
  patterns:
   single:
    name: keyword.control.loop.ocaml
    pattern: \bdo\b
   include: $self
 multi:
  name: meta.while-loop.ocaml
  begin: \b(while)\b
  bcaps: 1=keyword.control.while-loop.ocaml
  end: \b(done)\b
  ecaps: 1=keyword.control.while-loop.ocaml
  patterns:
   single:
    name: keyword.control.loop.ocaml
    pattern: \bdo\b
   include: $self
 multi:
  name: meta.paren-group.ocaml
  begin: \(
  end: \)
  patterns:
   include: $self
 single:
  name: keyword.operator.ocaml
  pattern: \b(and|land|lor|lsl|lsr|asr|lnot|lxor|mod|or)\b
 single:
  name: keyword.control.ocaml
  pattern: \b(downto|if|else|match|then|to|when|with|try)\b
 single:
  name: keyword.other.ocaml
  pattern: \b(as|assert|class|constraint|exception|functor|in|include|inherit|initializer|lazy|let|mod|module|mutable|new|object|open|private|rec|sig|struct|type|virtual)\b
 include: #module-signature
 single:
  name: invalid.illegal.unrecognized-character.ocaml
  pattern: (’|‘|“|”)
